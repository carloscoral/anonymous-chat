{"version":3,"sources":["styled-components/Layout.ts","styled-components/SideNav.ts","styled-components/ToggleButton.ts","styled-components/BoxShadow.ts","styled-components/Header.ts","providers/theme/themeList.ts","store/chat/types.ts","store/chat/actions/chat.ts","store/system/actions/system.ts","store/system/types.ts","components/HeaderSideNav.tsx","store/system/actions/ui.ts","styled-components/Tabs.ts","components/TabsChat.tsx","styled-components/ListItem.ts","styled-components/List.ts","components/ChatList.tsx","styled-components/TextInput.ts","components/SearchBar.tsx","styled-components/Button.ts","components/CreateGroup.tsx","components/side-nav-chat/SideNavChat.tsx","styled-components/LayoutContent.ts","components/HeaderSingleChat.tsx","styled-components/Message.ts","components/MessagesList.tsx","components/MessageInput.tsx","components/single-chat/SingleChat.tsx","components/Chat.tsx","providers/theme/themes/basic.ts","providers/theme/themes/light.ts","providers/theme/themes/dark.ts","providers/theme/getTheme.ts","app/App.tsx","store/system/reducers/systemReducer.ts","store/system/reducers/uiReducer.ts","store/chat/reducers/chatReducer.ts","store/store.ts","index.tsx"],"names":["Layout","styled","div","props","theme","background","color","SideNav","closed","width","secondaryBackground","boxShadowCenter","boxShadowColor","ToggleButton","getShadowDirection","directionShadow","boxShadowTop","boxShadowLeft","boxShadowRight","boxShadowBottom","BoxShadow","THEMES","Header","height","backgroundColor","borders","divider","ConversationType","getFromLocalStorage","key","values","storageValues","window","localStorage","getItem","err","getMessages","sender","receiver","type","dispatch","messages","parsedMessages","JSON","parse","filteredMessages","user","filter","message","id","group","updateMessagesList","getGroups","serverGroups","updateGroupList","payload","groups","updateUsersList","users","setUnreadMessages","unreadMessages","updateSession","session","HeaderSideNav","title","useSelector","state","ui","system","useState","editing","setEditing","newUsername","setNewUsername","themeName","useDispatch","className","value","onChange","e","target","onClick","username","parsedUsers","currentUser","find","u","setItem","stringify","updateUsername","LIGHT","DARK","loggedIn","Tabs","ul","primary","TabsChat","tabs","active","setActiveTab","map","tab","ListItem","li","listItemActiveBackground","listItemActiveColor","link","boxShadowLinkHover","List","reversed","ChatList","list","setCurrentConversation","currentConversation","chat","autoHide","item","TextInput","margin","shadow","iconColor","SearchBar","onSearch","text","setText","Button","button","CreateGroup","groupName","setGroupName","category","setCategory","categories","onSubmit","preventDefault","name","Date","now","toString","createGroup","placeholder","cate","SideNavChat","open","setOpen","activeTab","currentList","setCurrentList","searchedList","setSearchedList","searchPattern","setSearchPattern","privateChats","useEffect","filtered","toLowerCase","match","usersWithoutCurrentUser","filteredUsers","us","unread","conversation","conversationType","updatePrivateChats","LayoutContent","HeaderSingleChat","Message","maxWidth","gradient","left","right","secondary","MessagesList","hiddenMessages","scrollbar","useRef","setList","scroll","current","scrollHeight","getScrollHeight","scrollTop","includes","fromSender","ref","undefined","updateHiddenMessages","hideMessage","MessageInput","onSend","handleSend","onKeyUp","keyCode","SingleChat","newMessage","read","push","Chat","listener","serverUsers","getUnreadMessages","addEventListener","removeEventListener","userId","userSession","basic","getTheme","App","initialState","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","reducers","combineReducers","action","store","createStore","applyMiddleware","thunk","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6be37763.chunk.js","sourcesContent":["import styled from 'styled-components';\n\nexport const Layout = styled.div`\n  display: flex;\n  height: 100vh;\n  max-height: 100vh;\n  background-color: ${ props => props.theme.background };\n  color: ${ props => props.theme.color };\n`;\n","import styled from 'styled-components';\n\nexport interface SideNavStyle {\n  width?: string;\n  background?: string;\n  boxShadowColor?: string;\n  closed?: boolean;\n}\n\nexport const SideNav = styled.div<SideNavStyle>`\n  width: ${ props => props.closed ? '0' : props.width || '300px' };\n  min-width: ${ props => props.closed ? '0' : props.width || '300px' };\n  max-height: 100vh;\n  background-color: ${ props => props.background || props.theme.secondaryBackground };\n  position: relative;\n  box-shadow: ${ props => props.theme.boxShadowCenter } ${ props => props.boxShadowColor || props.theme.boxShadowColor } inset;\n  transition: width 500ms ease-in-out, min-width 500ms ease-in-out;\n  overflow: hidden;\n`;\n","import styled from 'styled-components';\n\ninterface ToggleButtonStyle {\n  background?: string;\n  boxShadowColor?: string;\n}\n\nexport const ToggleButton = styled.div<ToggleButtonStyle>`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  position: absolute;\n  top: 70px;\n  right: 0;\n  background-color: ${ props => props.background || props.theme.secondaryBackground };\n  box-shadow: ${ props => props.theme.boxShadowCenter } ${ props => props.boxShadowColor || props.theme.boxShadowColor } inset;\n  transform: translateX(100%);\n  border-radius: 0 100% 100% 0;\n  width: 35px;\n  height: 35px;\n  z-index: 10;\n`;\n","import styled, { ThemedStyledProps } from 'styled-components'\n\ninterface BoxShadowProps {\n  directionShadow?: string;\n  boxShadowColor?: string;\n}\n\nexport const getShadowDirection = ( props: ThemedStyledProps<any, any> ) => {\n  switch( props.directionShadow ) {\n    case 'top':\n      return props.theme.boxShadowTop;\n    case 'left':\n      return props.theme.boxShadowLeft;\n    case 'right':\n      return props.theme.boxShadowRight;\n    case 'center':\n      return props.theme.boxShadowCenter;\n    default:\n      return props.theme.boxShadowBottom;\n  }\n}\n\nexport const BoxShadow = styled.div<BoxShadowProps>`\n  box-shadow: ${ props => getShadowDirection( props ) } ${ props => props.boxShadowColor || props.theme.boxShadowColor };\n`;\n","import styled from 'styled-components';\nimport { BoxShadow } from './BoxShadow';\n\nexport type HeaderStyle = {\n  width?: string;\n  height?: string;\n  backgroundColor?: string;\n  boxShadowColor?: string;\n  borders?: boolean;\n}\n\nexport const Header = styled(BoxShadow)<HeaderStyle>`\n  width: ${ props => props.width || '100%' };\n  min-width: ${ props => props.width || '100%' };\n  height: ${ props => props.height || '60px' };\n  min-height: ${ props => props.height || '60px' };\n  background-color: ${ props => props.backgroundColor || props.theme.background };\n  border-left: 1px solid ${ props => props.borders ? props.theme.divider : props.backgroundColor || props.theme.background };\n  border-right: 1px solid ${ props => props.borders ? props.theme.divider : props.backgroundColor || props.theme.background };\n  box-sizing: border-box;\n  position: relative;\n  z-index: 1;\n\n  & > * {\n    min-width: ${ props => props.width || '100%' };\n  }\n`;\n","enum THEMES {\n  LIGHT = 'light',\n  DARK = 'dark'\n}\n\nexport default THEMES;\n","import { User } from '../system/types';\n\nexport enum ConversationType {\n  user = 'USER',\n  group = 'GROUP'\n}\n\nexport interface Message {\n  id: string;\n  sender: {\n    id: string;\n    username: string;\n  }\n  receiver: {\n    id: string;\n  }\n  text: string;\n  read?: boolean;\n}\n\nexport interface Conversation {\n  type: ConversationType,\n  sender: {\n    id: string;\n  }\n}\n\nexport interface Group {\n  id: string;\n  username: string;\n  type?: string;\n}\n\nexport interface ChatState {\n  users?: User[];\n  groups?: Group[];\n  messages?: Message[];\n  currentConversation?: Conversation;\n  privateChats?: User[];\n  unreadMessages?: string[];\n  hiddenMessages?: string[];\n}\n\nexport const UPDATE_USERS_LIST = 'chat/update_user_list';\nexport const UPDATE_GROUP_LIST = 'chat/update_group_list';\nexport const UPDATE_MESSAGES_LIST = 'chat/update_message_list';\nexport const UPDATE_PRIVATE_CHATS = 'chat/update_private_chats';\nexport const SET_CURRENT_CONVERSATION = 'chat/set_current_conversation';\nexport const SET_UNREAD_MESSAGES = 'chat/set_unread';\nexport const UPDATE_HIDDEN_MESSAGES = 'chat/update_hidden_messages;'\n\ninterface UpdateUsersList {\n  type: typeof UPDATE_USERS_LIST;\n  payload: ChatState\n}\n\ninterface UpdateGroupList {\n  type: typeof UPDATE_GROUP_LIST;\n  payload: ChatState\n}\n\ninterface UpdateMessageList {\n  type: typeof UPDATE_MESSAGES_LIST;\n  payload: ChatState\n}\n\ninterface UpdatePrivateChats {\n  type: typeof UPDATE_PRIVATE_CHATS;\n  payload: ChatState;\n}\n\ninterface SetCurrentConversation {\n  type: typeof SET_CURRENT_CONVERSATION;\n  payload: ChatState\n}\n\ninterface SetUnreadMessages {\n  type: typeof SET_UNREAD_MESSAGES,\n  payload: ChatState\n}\n\ninterface UpdateHiddenMessages {\n  type: typeof UPDATE_HIDDEN_MESSAGES,\n  payload: ChatState\n}\n\nexport type ChatActionTypes = UpdateUsersList|UpdateGroupList|UpdateMessageList|SetCurrentConversation\n  |UpdatePrivateChats|SetUnreadMessages|UpdateHiddenMessages;\n","import {\n  ChatActionTypes,\n  Conversation,\n  ConversationType,\n  Group,\n  Message,\n  SET_CURRENT_CONVERSATION,\n  UPDATE_HIDDEN_MESSAGES,\n  UPDATE_MESSAGES_LIST,\n  UPDATE_PRIVATE_CHATS,\n  UPDATE_USERS_LIST\n} from '../types'\nimport { Dispatch } from 'redux'\nimport { User } from '../../system/types'\n\n/**\n * Check user\n */\nexport const checkUser = ( user: User|null ) => {\n  if ( user ) {\n    const users = getFromLocalStorage( 'users' );\n    const parsedUsers = JSON.parse( users );\n    return parsedUsers.find( (u: User) => u.id === user.id );\n  }\n  return false;\n}\n\n/**\n * Function to update username\n */\nexport const updateUsername = ( user: User|null, username: string ) => {\n  return ( dispatch: Dispatch<ChatActionTypes> ) => {\n    const users = getFromLocalStorage( 'users' );\n    const parsedUsers = JSON.parse( users );\n    const currentUser: User = parsedUsers.find( ( u: User ) => u.id === user?.id );\n    if (currentUser) {\n      currentUser.username = username;\n      window.localStorage.setItem( 'users', JSON.stringify(parsedUsers) );\n      dispatch( updateUsersList( parsedUsers ) );\n    }\n  }\n}\n\n/**\n * Function to get groups\n */\nexport const getGroupsCategories = () => {\n  return ['Friends', 'Radio', 'Social', 'Politics', 'Health', 'Technology', 'Sports', 'Hobbies', 'Bussiness'];\n}\n\n/**\n * Fake function as server\n */\nexport const getFromLocalStorage = ( key: string ): string => {\n  let values: string = '[]';\n  try {\n    const storageValues = window.localStorage.getItem( key );\n    if ( storageValues ) {\n      values = storageValues;\n    }\n  } catch ( err ) {}\n  return values;\n}\n\nexport const getUnreadMessages = ( user: User|null ) => {\n  return ( dispatch: Dispatch<ChatActionTypes> ) => {\n    // TODO Connect with server and get messages list\n    if ( user ){\n      const messages = getFromLocalStorage( 'messages' );\n      const parsedMessages: Message[] = JSON.parse( messages );\n      const filteredMessages: Message[] = parsedMessages.filter( ( message: Message) => (\n        message.receiver.id === user.id\n      ) );\n      const unread = filteredMessages.map( (message: Message) => message.receiver.id );\n      dispatch( setUnreadMessages( unread ) );\n    }\n  };\n}\n\n/**\n * Function to get list of groups\n */\nexport const getMessages = ( sender?: User|null, receiver?: User|null, type?: ConversationType ) => {\n  return ( dispatch: Dispatch<ChatActionTypes> ) => {\n    // TODO Connect with server and get messages list\n    const messages = getFromLocalStorage( 'messages' );\n    const parsedMessages: Message[] = JSON.parse( messages );\n    let filteredMessages: Message[] = [];\n    if ( type === ConversationType.user ) {\n      if ( sender && receiver ){\n        filteredMessages = parsedMessages.filter( ( message: Message) => (\n          (message.sender.id === receiver.id && message.receiver.id === sender.id)\n          || (message.receiver.id === receiver.id && message.sender.id === sender.id)\n        ) );\n      }\n    } else if ( type === ConversationType.group ) {\n      if ( sender ) {\n        filteredMessages = parsedMessages.filter( ( message: Message) => (\n          message.receiver.id === sender.id\n        ) );\n      }\n    }\n    dispatch( updateMessagesList( filteredMessages ) );\n  };\n}\n\n/**\n * Function to create group\n */\nexport const createGroup = ( name: string, category: string ) => {\n  return ( dispatch: Dispatch<ChatActionTypes> ) => {\n    // TODO Connect with server and get groups list\n    const serverGroups = getFromLocalStorage( 'groups' );\n    let groups = JSON.parse( serverGroups );\n    const newGroup: Group = {\n      id: Date.now().toString(),\n      username: name,\n      type: category\n    };\n    groups = [ newGroup, ...groups ];\n    window.localStorage.setItem( 'groups', JSON.stringify( groups ) );\n    dispatch( updateGroupList( groups ) );\n  };\n}\n\n/**\n * Function to get list of groups\n */\nexport const getGroups = () => {\n  return ( dispatch: Dispatch<ChatActionTypes> ) => {\n    // TODO Connect with server and get groups list\n    const serverGroups = getFromLocalStorage( 'groups' );\n    dispatch( updateGroupList( JSON.parse(serverGroups) ) );\n  };\n}\n\n/**\n * Function to get list of connected users\n */\nexport const getUsers = () => {\n  return ( dispatch: Dispatch<ChatActionTypes> ) => {\n    // TODO Connect with server and get users list\n    const serverUsers = getFromLocalStorage( 'users' );\n    dispatch( updateUsersList( JSON.parse(serverUsers) ) );\n  };\n}\n\n/**\n * Function to get dispatch payload to update private chat list\n * @param { User[] } privateChats\n * @returns { ChatActionTypes }\n */\nexport const updatePrivateChats = ( privateChats: User[] ): ChatActionTypes => {\n  return {\n    type: UPDATE_PRIVATE_CHATS,\n    payload: {\n      privateChats\n    }\n  }\n};\n\n/**\n * Function to get dispatch payload to update messages list\n * @param { Group[] } messages\n * @returns { ChatActionTypes }\n */\nexport const updateMessagesList = ( messages: Message[] ): ChatActionTypes => {\n  return {\n    type: UPDATE_MESSAGES_LIST,\n    payload: {\n      messages\n    }\n  }\n};\n\n/**\n * Function to get dispatch payload to update group list\n * @param { Group[] } groups\n * @returns { ChatActionTypes }\n */\nexport const updateGroupList = ( groups: Group[] ): ChatActionTypes => {\n  return {\n    type: UPDATE_USERS_LIST,\n    payload: {\n      groups\n    }\n  }\n};\n\n/**\n * Function to get dispatch payload to update users list\n * @param { User[] } users\n * @returns { ChatActionTypes }\n */\nexport const updateUsersList = ( users: User[] ): ChatActionTypes => {\n  return {\n    type: UPDATE_USERS_LIST,\n    payload: {\n      users\n    }\n  }\n};\n\n/**\n * Function to get dispatch payload to update current conversation\n * @param currentConversation { Conversation }\n */\nexport const setCurrentConversation = ( currentConversation: Conversation ): ChatActionTypes => {\n  return {\n    type: SET_CURRENT_CONVERSATION,\n    payload: {\n      currentConversation\n    }\n  }\n};\n\nexport const setUnreadMessages = ( unreadMessages: string[] ): ChatActionTypes => {\n  return {\n    type: SET_CURRENT_CONVERSATION,\n    payload: {\n      unreadMessages\n    }\n  }\n};\n\nexport const updateHiddenMessages = ( hiddenMessages: string[] ): ChatActionTypes => {\n  return {\n    type: UPDATE_HIDDEN_MESSAGES,\n    payload: {\n      hiddenMessages\n    }\n  }\n};\n","import { SystemActionTypes, SystemState, UPDATE_SESSION, User } from '../types'\nimport { Dispatch } from 'redux'\nimport { updateUsersList } from '../../chat/actions/chat'\nimport { ChatActionTypes } from '../../chat/types'\n\n/**\n * Function to get an anonymous session on server\n */\nexport const loginAnonymous = () => {\n  return ( dispatch: Dispatch<SystemActionTypes|ChatActionTypes> ) => {\n    // TODO Connect with server and get user session\n    const userId = Date.now().toString();\n    const userSession = {\n      loggedIn: true,\n      session: Date.now().toString(),\n      user: {\n        id: userId,\n        username: `Anon${userId}`\n      }\n    };\n    let users: any = window.localStorage.getItem( 'users' );\n    if ( !users ) {\n      users = [];\n    } else {\n      users = JSON.parse(users);\n    }\n    users = [ userSession.user, ...users ];\n    window.localStorage.setItem( 'users', JSON.stringify(users) );\n    dispatch( updateSession( userSession ) );\n    dispatch( updateUsersList( users ) );\n  };\n}\n\nexport const logout = ( user: User ) => {\n  return ( dispatch: Dispatch<SystemActionTypes> ) => {\n    // TODO Connect with server and close user session\n    window.localStorage.setItem( 'users', JSON.stringify( [] ) );\n    dispatch( updateSession( {\n      loggedIn: false,\n      session: null,\n      user: null\n    } ) );\n  };\n}\n\n/**\n * Function to get dispatch payload to update session\n * @param { SystemState } session\n * @returns { SystemActionTypes }\n */\nexport const updateSession = ( session: SystemState ): SystemActionTypes => {\n  return {\n    type: UPDATE_SESSION,\n    payload: session\n  }\n};","import THEMES from '../../providers/theme/themeList'\n\nexport interface User {\n  id: string;\n  username: string;\n  type?: string;\n}\n\nexport interface SystemState {\n  loggedIn: boolean;\n  session: string|null;\n  user: User|null;\n}\n\nexport interface SystemUI {\n  themeName: THEMES;\n}\n\nexport const UPDATE_SESSION = 'system/update_session';\nexport const UPDATE_THEME = 'system/update_theme';\n\ninterface UpdateSessionAction {\n  type: typeof UPDATE_SESSION;\n  payload: SystemState\n}\n\ninterface UpdateThemeAction {\n  type: typeof UPDATE_THEME;\n  payload: SystemUI\n}\n\nexport type SystemActionTypes = UpdateSessionAction|UpdateThemeAction;","import React, { useState } from 'react'\nimport { Header } from '../styled-components/Header'\nimport { updateTheme } from '../store/system/actions/ui'\nimport THEMES from '../providers/theme/themeList'\nimport { logout, updateSession } from '../store/system/actions/system'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { RootState } from '../store/store'\nimport { updateUsername } from '../store/chat/actions/chat'\n\ninterface HeaderSideNavProps {\n  title?: string;\n}\n\nfunction HeaderSideNav ( { title }: HeaderSideNavProps ) {\n  const { ui, system } = useSelector( ( state: RootState ) => state );\n  const [editing, setEditing] = useState(false);\n  const [newUsername, setNewUsername] = useState('');\n  const { themeName } = ui;\n  const { user } = system;\n  const dispatch = useDispatch();\n\n  const changeTheme = () => {\n    dispatch( updateTheme( { themeName: themeName === THEMES.LIGHT ? THEMES.DARK : THEMES.LIGHT } ) );\n  };\n\n  const handleLogout = () => {\n    if ( user ) {\n      dispatch( logout( user ) );\n    }\n  };\n\n  const initEdition = () => {\n    setEditing(true);\n    setNewUsername( user?.username || '' );\n  }\n\n  const update = () => {\n    dispatch( updateUsername( user, newUsername ) );\n    const session: any = {\n      ...system,\n      user: {\n        ...user,\n        username: newUsername,\n      }\n    };\n    dispatch( updateSession(session) );\n    setEditing(false);\n  }\n\n  return (\n    <Header width=\"300px\">\n      <div className=\"content-header\">\n        {\n          !editing\n            ? <span className=\"align-vertical\">{ title }<span className=\"material-icons cursor small\" onClick={initEdition}>edit</span></span>\n            : <span className=\"align-vertical\">\n                <input type=\"text\" value={newUsername} onChange={(e) => setNewUsername(e.target.value)} />\n                <span className=\"material-icons cursor small\" onClick={update}>check</span>\n                <span className=\"material-icons cursor small\" onClick={() => setEditing(false)}>close</span>\n            </span>\n        }\n        <div className=\"options\">\n          <span className=\"material-icons cursor small\" onClick={ changeTheme }>invert_colors</span>\n          <span className=\"material-icons cursor small\" onClick={ handleLogout }>power_settings_new</span>\n        </div>\n      </div>\n    </Header>\n  );\n}\n\nexport default HeaderSideNav;","import { SystemActionTypes, SystemUI, UPDATE_THEME } from '../types'\n\nexport const updateTheme = ( theme: SystemUI ): SystemActionTypes => {\n  return {\n    type: UPDATE_THEME,\n    payload: theme\n  };\n};","import styled from 'styled-components';\n\nexport const Tabs = styled.ul`\n  display: flex;\n  list-style: none;\n  margin: 0;\n\n  & > li {\n    margin-right: 5px;\n    text-transform: uppercase;\n    font-size: 0.8em;\n\n    &.active {\n      font-weight: bold;\n      color: ${ props => props.theme.primary };\n    }\n  }\n`;\n","import React from 'react';\nimport { Tabs } from '../styled-components/Tabs';\n\ninterface TabsProps {\n  tabs: string[];\n  setActiveTab: Function;\n  active?: string;\n}\n\nfunction TabsChat ( { tabs, active, setActiveTab }: TabsProps ) {\n  return (\n    <Tabs className=\"padded\">\n      {\n        tabs.map( tab =>\n          <li\n            className={ active === tab ? 'active cursor' : 'cursor' }\n            key={tab}\n            onClick={ () => setActiveTab( tab ) }\n          >\n            { tab }\n          </li>\n        )\n      }\n    </Tabs>\n  )\n}\n\nexport default TabsChat;\n","import styled from 'styled-components';\n\ninterface ListItemStyle {\n  background?: string;\n  boxShadowColor?: string;\n  link?: boolean;\n  active?: boolean;\n}\n\nexport const ListItem = styled.li<ListItemStyle>`\n  display: flex;\n  margin: 0 0 10px 0;\n  position: relative;\n  padding: 0;\n  align-items: center;\n  background-color: ${ props => props.active ? props.theme.listItemActiveBackground : props.background || props.theme.background };\n  color: ${ props => props.active ? props.theme.listItemActiveColor : props.theme.color };\n  box-shadow: ${ props => props.theme.boxShadowCenter } ${ props => props.boxShadowColor || props.theme.boxShadowColor };\n  padding: 10px;\n  border-radius: 5px;\n  cursor: ${ props => props.link ? 'pointer' : 'initial' };\n  transition: box-shadow 100ms ease-in-out;\n\n  &:hover {\n    box-shadow: ${ props => props.link ? props.theme.boxShadowLinkHover : props.theme.boxShadowCenter } ${ props => props.boxShadowColor || props.theme.boxShadowColor };    \n  }\n`;\n","import styled from 'styled-components';\n\ninterface ListStyle {\n  reversed?: boolean;\n}\n\nexport const List = styled.ul<ListStyle>`\n  display: flex;\n  flex-direction: column;\n  min-height: 95%;\n  justify-content: ${ props => props.reversed ? 'flex-end' : 'inherit' };\n  margin: 0;\n  padding: 10px;\n  list-style: none;\n`;\n","import React  from 'react'\nimport { ListItem } from '../styled-components/ListItem'\nimport { List } from '../styled-components/List'\nimport { Scrollbars } from 'react-custom-scrollbars';\nimport { useSelector } from 'react-redux'\nimport { RootState } from '../store/store'\n\ninterface Chat {\n  id: string;\n  username: string;\n  type: string;\n  unread: boolean;\n}\n\ninterface ChatListProps {\n  list: Chat[]\n  groups?: string[];\n  setCurrentConversation: ( conversation: any ) => void;\n}\n\nfunction ChatList ( { list, groups, setCurrentConversation }: ChatListProps ) {\n  const { currentConversation } = useSelector( (state: RootState) => state.chat );\n\n  const isCurrent = ( user: any ): boolean => {\n    return currentConversation?.sender.id === user.id;\n  };\n\n  return (\n    <Scrollbars autoHide>\n      <List>\n        {\n          groups ?\n            groups.map( (group: string ) => (\n              <div key={group}>\n                <h4 className=\"subtitle\">{ group }</h4>\n                {\n                  list.filter( item => item.type === group ).map( item => (\n                    <ListItem link key={item.id} onClick={ () => setCurrentConversation(item) } active={ isCurrent(item) }>\n                      <span className=\"material-icons icon\">account_circle</span> { item.username }\n                    </ListItem>\n                  ) )\n                }\n              </div>\n            ) )\n            : list.map( item => (\n              <ListItem link key={item.id} onClick={ () => setCurrentConversation(item) }>\n                <span className=\"material-icons icon\">account_circle</span> { item.username }\n              </ListItem>\n            ) )\n        }\n      </List>\n    </Scrollbars>\n  );\n}\n\nexport default ChatList;\n","import styled from 'styled-components';\n\ninterface TextInputStyle {\n  margin?: string;\n  shadow?: boolean;\n  background?: string;\n  iconColor?: string;\n}\n\nexport const TextInput = styled.div<TextInputStyle>`\n  display: flex;\n  align-items: center;\n  margin: ${ props => props.margin || '10px' };\n  background-color: ${ props => props.background || '#fff' };\n  border-radius: 20px;\n  box-shadow: ${ props => props.shadow ? `${props.theme.boxShadowCenter} ${props.theme.boxShadowColor}` : 'none' };\n  overflow: hidden;\n\n  & > .icon {\n    padding: 0 10px;\n    color: ${ props => props.iconColor || props.theme.primary };\n  }\n  & > input {\n    flex: 1 1 auto;\n    padding: 10px;\n    border: none;\n    background-color: transparent;\n\n    &:focus {\n      outline: none;\n    }\n  }\n`;","import React, { ChangeEvent, useState } from 'react';\nimport { TextInput } from '../styled-components/TextInput'\n\ninterface SearchBarProps {\n  onSearch: ( text: string ) => void\n}\n\nfunction SearchBar ( { onSearch }: SearchBarProps ) {\n  const [text, setText] = useState('');\n\n  const handleInput = ( e: ChangeEvent<HTMLInputElement> ) => {\n    const value = e.target.value;\n    setText( value );\n    onSearch( value );\n  };\n\n  return (\n    <TextInput shadow iconColor=\"#333\">\n      <span className=\"material-icons icon\">search</span>\n      <input\n        className=\"search-bar-input\"\n        type=\"text\"\n        value={ text }\n        onChange={ handleInput }\n      />\n    </TextInput>\n  )\n}\n\nexport default SearchBar;\n","import styled from 'styled-components';\nimport { getShadowDirection } from './BoxShadow';\n\ninterface ButtonStyle {\n  background?: string;\n  boxShadowColor?: string;\n  color?: string;\n}\n\nexport const Button = styled.button<ButtonStyle>`\n  background-color: ${ props => props.background || props.theme.primary };\n  border: none;\n  border-radius: 5px;\n  padding: 10px;\n  box-sizing: border-box;\n  color: ${ props => props.color || props.theme.color };\n  text-transform: uppercase;\n  font-weight: 500;\n  box-shadow:\n    ${ props => getShadowDirection( { ...props, directionShadow: 'center' } ) }\n    ${ props => props.boxShadowColor || props.theme.boxShadowColor };\n  cursor: pointer;\n`;","import React, { useState, FormEvent } from 'react'\nimport { Button } from '../styled-components/Button'\nimport { useDispatch } from 'react-redux'\nimport { createGroup, getGroupsCategories } from '../store/chat/actions/chat'\n\nfunction CreateGroup () {\n  const dispatch = useDispatch();\n  const [ groupName, setGroupName ] = useState('');\n  const [ category, setCategory ] = useState('Friends');\n  const categories = getGroupsCategories();\n\n  const handleSubmit = ( e: FormEvent ) => {\n    e.preventDefault();\n    if ( groupName ) {\n      dispatch( createGroup( groupName, category ) );\n    }\n  };\n\n  return (\n    <form className=\"padded\" onSubmit={ handleSubmit }>\n      <input\n        type=\"text\"\n        placeholder=\"Group name\"\n        className=\"extend\"\n        value={groupName}\n        onChange={ ( e ) => setGroupName( e.target.value ) }\n      />\n      <select className=\"extend\" onChange={ (e) => setCategory( e.target.value ) }>\n        {\n          categories.map( cate => <option key={cate} value={cate}>{ cate }</option> )\n        }\n      </select>\n      <Button color=\"#fff\" className=\"extend\">\n        Create Group\n      </Button>\n    </form>\n  )\n}\n\nexport default CreateGroup;\n","import React, { useEffect, useState } from 'react'\nimport { SideNav } from '../../styled-components/SideNav'\nimport { ToggleButton } from '../../styled-components/ToggleButton'\nimport HeaderSideNav from '../HeaderSideNav'\nimport TabsChat from '../TabsChat'\nimport ChatList from '../ChatList'\nimport './SideNavChat.scss';\nimport SearchBar from '../SearchBar'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { RootState } from '../../store/store'\nimport { User } from '../../store/system/types'\nimport { getGroupsCategories, setCurrentConversation, updatePrivateChats } from '../../store/chat/actions/chat'\nimport { ConversationType } from '../../store/chat/types'\nimport CreateGroup from '../CreateGroup'\n\nfunction SideNavChat () {\n  const dispatch = useDispatch();\n  const tabs = [ 'Users', 'Groups' ];\n  const [ open, setOpen ] = useState( true );\n  const [ activeTab, setActiveTab ] = useState( tabs[0] );\n  const [ currentList, setCurrentList ] = useState( [] );\n  const [ searchedList, setSearchedList ] = useState([]);\n  const [ searchPattern, setSearchPattern ] = useState('');\n  const { system, chat } = useSelector( ( state: RootState ) => state );\n  const { user } = system;\n  const { users, groups, privateChats, unreadMessages }: any = chat;\n\n  const toggleNav = () => {\n    setOpen( !open );\n  }\n\n  const onSearchHandle = ( text: string ) => {\n    setSearchPattern( text );\n  }\n\n  useEffect(() => {\n    const filtered = currentList.filter( (item: any) => item.username.toLowerCase().match( searchPattern ) );\n    setSearchedList( filtered );\n  }, [searchPattern, currentList])\n\n  useEffect( () => {\n    if ( activeTab === 'Users' ) {\n      setCurrentList( usersWithoutCurrentUser() );\n    } else if ( activeTab === 'Groups' ){\n      setCurrentList( groups );\n    } else {\n      setCurrentList( [] );\n    }\n  }, [ activeTab, users, groups, privateChats, unreadMessages ] );\n\n  const usersWithoutCurrentUser = () => {\n    if ( user ) {\n      const filteredUsers = users.filter( ( us: User ) => us.id !== user.id );\n      return [...filteredUsers].map( (us: User) => {\n        if ( !!privateChats.find( (chat: any) => us.id === chat.id  ) ) {\n          us.type = 'Private';\n        } else {\n          us.type = 'Others';\n        }\n        return {\n          ...us,\n          unread: !!unreadMessages.find( (id: string) => us.id === id )\n        };\n      } );\n    }\n    return users;\n  }\n\n  const updateConversation = ( conversation: any ) => {\n    let conversationType = 'USER';\n    if ( activeTab === 'Users' ) {\n      const existsPrivateChat = privateChats?.find( ( user: User ) => conversation?.id === user.id );\n      if ( !existsPrivateChat ) {\n        if ( privateChats ) {\n          dispatch( updatePrivateChats( [ conversation, ...privateChats ] ) );\n        }\n      }\n    } else if ( activeTab === 'Groups' ) {\n      conversationType = 'GROUP';\n    }\n    dispatch( setCurrentConversation( {\n      type: conversationType as ConversationType,\n      sender: conversation\n    } ) );\n  }\n\n  const getGroups = () => {\n    if ( activeTab === 'Users' ) {\n      return [ 'Private', 'Others' ];\n    } else if( activeTab === 'Groups' ) {\n      return getGroupsCategories();\n    } else {\n      return [ 'Others' ];\n    }\n  }\n\n  return (\n    <div className=\"relative\">\n      <ToggleButton className=\"cursor\" onClick={ toggleNav }>\n        {\n          open\n            ? <span className=\"material-icons\">close</span>\n            : <span className=\"material-icons\">menu</span>\n        }\n      </ToggleButton>\n      <SideNav className=\"max-height side-nav\" closed={ !open }>\n        <HeaderSideNav title={ user?.username }/>\n        <h1 className=\"title padded\"> Chats </h1>\n        <TabsChat tabs={tabs} active={activeTab} setActiveTab={setActiveTab} />\n        {\n          activeTab === 'Groups' && <CreateGroup />\n        }\n        <SearchBar onSearch={ onSearchHandle } />\n        <div className=\"list-container\">\n          <ChatList list={ searchedList } groups={ getGroups() } setCurrentConversation={updateConversation} />\n        </div>\n      </SideNav>\n    </div>\n  )\n}\n\nexport default SideNavChat;\n","import styled from 'styled-components';\n\nexport const LayoutContent = styled.div`\n  display: flex;\n  flex-direction: column;\n  overflow: hidden;\n  flex: 1 1 auto;\n  height: 100%;\n  max-height: 100%;\n  position: relative;\n`;\n","import React from 'react';\nimport { Header } from '../styled-components/Header'\n\ninterface HeaderSingleChatProps {\n  title?: string;\n}\n\nfunction HeaderSingleChat ( { title }: HeaderSingleChatProps ) {\n  return (\n    <Header borders={ true }>\n      <strong className=\"align-vertical\">\n        <span className=\"material-icons icon\">account_circle</span> { title }\n      </strong>\n    </Header>\n  );\n}\n\nexport default HeaderSingleChat;\n","import styled from 'styled-components';\n\ninterface MessageStyle {\n  maxWidth?: string;\n  gradient?: boolean;\n  backgroundColor?: string;\n  color?: string;\n  right?: boolean;\n}\n\nconst getGradient = ( left: string, right: string ) => {\n  return `linear-gradient(90deg, ${left} 0%, ${right} 100%)`;\n};\n\nexport const Message = styled.li<MessageStyle>`\n  width: auto;\n  max-width: ${ props => props.maxWidth || '60%' };\n  padding: 5px 10px;\n  background: ${\n  props => props.backgroundColor || ( props.gradient\n    ? getGradient( props.theme.primary, props.theme.secondary )\n    : props.theme.secondaryBackground )\n};\n  color: ${ props => props.gradient ? '#fff' : props.color || props.theme.color };\n  position: relative;\n  align-self: ${ props => props.right ? 'flex-end' : 'flex-start' };\n  border-radius: 5px;\n  margin-bottom: 3px;\n  position: relative;\n\n  &:hover > .button {\n    opacity: 1;\n  }\n\n  & > .button {\n    position: absolute;\n    top: 5px;\n    right: 5px;\n    font-size: 0.8em;\n    color: red;\n    background-color: rgba(255, 255, 255, 0.5);\n    cursor: pointer;\n    opacity: 0;\n    transition: opacity 200ms ease-in-out;\n    border-radius: 2px;\n  }\n\n  & > .message-info {\n    font-size: 0.7em;\n    text-align: right;\n  }\n`;\n","import React, { useEffect, useRef, useState } from 'react'\nimport Scrollbars from 'react-custom-scrollbars';\nimport { Message } from '../styled-components/Message';\nimport { Message as IMessage } from '../store/chat/types';\nimport { List } from '../styled-components/List';\nimport { RootState } from '../store/store'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { updateHiddenMessages } from '../store/chat/actions/chat'\n\ninterface MessagesListProps {\n  className?: string;\n}\n\nfunction MessagesList ( { className }: MessagesListProps ) {\n  const dispatch = useDispatch();\n  const { messages, hiddenMessages } = useSelector( (state: RootState) => state.chat );\n  const scrollbar = useRef( null );\n  const { user } = useSelector( (state: RootState ) => state.system );\n  const [list, setList] = useState([]);\n\n  useEffect( () => {\n    if ( scrollbar ) {\n      const scroll: any = scrollbar.current;\n      if ( scroll ) {\n        const scrollHeight = scroll.getScrollHeight();\n        scroll.scrollTop( scrollHeight );\n      }\n\n    }\n  }, [scrollbar, messages]);\n\n  useEffect(() => {\n    const filteredMessages: any = messages?.filter( ( message: any ) => !hiddenMessages?.includes( message.id ) )\n    setList( filteredMessages || [] );\n  }, [messages, hiddenMessages])\n\n  const fromSender = ( message: IMessage ): boolean => {\n    return message.sender.id === user?.id;\n  }\n\n  const hideMessage = ( message: IMessage ) => {\n    dispatch( updateHiddenMessages( [ message.id, ...(hiddenMessages || []) ] ) );\n  }\n\n  return (\n    <Scrollbars className={ className } ref={scrollbar} >\n      <List reversed>\n        {\n          list.map( ( message: IMessage ) => (\n            <Message\n              key={ message.id }\n              backgroundColor={ !fromSender( message ) ? '#ddd' : undefined }\n              gradient={ fromSender( message ) }\n              color={ fromSender( message ) ? '#333' : '#333' }\n              right={ fromSender( message ) }\n            >\n              <div className=\"message-info\">\n                { message.sender.username } says:\n              </div>\n              <span className=\"material-icons button\" onClick={ () => hideMessage(message) }>close</span> { message.text }\n            </Message>\n          ) )\n        }\n      </List>\n    </Scrollbars>\n  );\n}\n\nexport default MessagesList;\n","import React, { KeyboardEvent, ChangeEvent, useState } from 'react'\nimport { BoxShadow } from '../styled-components/BoxShadow';\nimport { TextInput } from '../styled-components/TextInput'\n\ninterface MessageInputProps {\n  onSend: ( text: string ) => void\n}\n\nfunction MessageInput ( { onSend }: MessageInputProps ) {\n  const [ text, setText ] = useState('');\n\n  const handleSend = () => {\n    onSend( text );\n    setText( '' );\n  }\n\n  const handleEnterKey = (e: KeyboardEvent) => {\n    if( e.keyCode === 13) {\n      handleSend();\n    }\n  };\n\n  const handleChange = (e: ChangeEvent<HTMLInputElement>) => {\n    setText( e.target.value );\n  }\n\n  return (\n    <BoxShadow directionShadow=\"top\">\n      <TextInput className=\"limit-width\" margin=\"10px auto\" background=\"#eee\">\n        <input type=\"text\" value={ text } onChange={ handleChange } onKeyUp={ handleEnterKey } />\n        <span className=\"material-icons icon cursor\" onClick={ handleSend }>send</span>\n      </TextInput>\n    </BoxShadow>\n  )\n}\n\nexport default MessageInput;\n","import React from 'react'\nimport { LayoutContent } from '../../styled-components/LayoutContent'\nimport HeaderSingleChat from '../HeaderSingleChat'\nimport MessagesList from '../MessagesList'\nimport MessageInput from '../MessageInput'\nimport './SingleChat.scss'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { RootState } from '../../store/store'\nimport { getFromLocalStorage, getMessages } from '../../store/chat/actions/chat'\nimport {  Message } from '../../store/chat/types'\n\nfunction SingleChat () {\n  const dispatch = useDispatch();\n  const { chat, system } = useSelector( ( state: RootState ) => state );\n  const { currentConversation } = chat;\n  const { user } = system;\n\n  const handleSend = ( text: string ) => {\n    if ( text ) {\n      const messages: Message[] = JSON.parse( getFromLocalStorage( 'messages' ) );\n      if ( user && currentConversation ){\n        const newMessage: Message = {\n          id: Date.now().toString(),\n          sender: user,\n          receiver: currentConversation.sender,\n          read: false,\n          text\n        };\n        messages.push( newMessage );\n        window.localStorage.setItem( 'messages', JSON.stringify( messages ) );\n        dispatch( getMessages( currentConversation?.sender as any, user, currentConversation?.type ) );\n      }\n    }\n  };\n\n  return (\n    <LayoutContent>\n        <HeaderSingleChat title={(currentConversation?.sender as any)?.username} />\n      { ( currentConversation &&\n        <LayoutContent>\n          <MessagesList\n            className=\"extend limit-width\"\n          />\n          <MessageInput onSend={ handleSend } />\n        </LayoutContent>\n      ) ||\n        <div className=\"limit-width\">\n          Start a conversation\n        </div>\n      }\n    </LayoutContent>\n  )\n}\n\nexport default SingleChat;\n","import React, { useEffect } from 'react'\nimport { Layout } from '../styled-components/Layout'\nimport SideNavChat from './side-nav-chat/SideNavChat'\nimport SingleChat from './single-chat/SingleChat'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { loginAnonymous } from '../store/system/actions/system'\nimport { RootState } from '../store/store'\nimport { checkUser, getGroups, getMessages, getUnreadMessages, getUsers } from '../store/chat/actions/chat'\n\nfunction Chat() {\n  const { chat, system } = useSelector( ( state: RootState ) => state );\n  const { loggedIn, user } = system;\n  const { currentConversation } = chat;\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    const listener = () => {\n      dispatch( getUsers() );\n      dispatch( getGroups() );\n      dispatch( getMessages(currentConversation?.sender as any, user, currentConversation?.type) )\n      dispatch( getUnreadMessages( user ) );\n    };\n    window.addEventListener('storage',  listener);\n    return () => {\n      window.removeEventListener( 'storage', listener );\n    }\n  });\n\n  useEffect( () => {\n    dispatch( getMessages(currentConversation?.sender as any, user, currentConversation?.type) );\n    dispatch( getGroups() );\n  }, [dispatch, currentConversation, user]);\n\n  useEffect(() => {\n    if ( !loggedIn ) {\n      dispatch( loginAnonymous() );\n    }\n  }, [loggedIn, dispatch]);\n\n  return (\n    <Layout>\n      <SideNavChat />\n      <SingleChat />\n    </Layout>\n  )\n}\n\nexport default Chat;\n","export default {\n  primary: '#7652EA',\n  secondary: '#CA91F2',\n  background: '#fff',\n  secondaryBackground: '#F8FAFB',\n  color: '#333',\n  boxShadowColor: 'rgba(20, 0, 20, 0.2)',\n  boxShadowBottom: '0 3px 10px',\n  boxShadowTop: '0 -3px 10px',\n  boxShadowLeft: '-3px 0 10px',\n  boxShadowRight: '3px 0 10px',\n  boxShadowCenter: '0 0 10px',\n  boxShadowLinkHover: '0 0 12px 2px',\n  listItemActiveBackground: '#333',\n  listItemActiveColor: '#ddd',\n  divider: 'rgba(20, 0, 20, 0.1)'\n};\n","import basic from './basic';\n\nexport default {\n  ...basic\n};\n","import basic from './basic';\n\nexport default {\n  ...basic,\n  background: '#333',\n  secondaryBackground: '#2a2a2a',\n  color: '#ddd',\n  listItemActiveBackground: '#fff',\n  listItemActiveColor: '#333',\n};\n","import { DARK, LIGHT } from './themes';\nimport THEMES from './themeList'\n\nexport const getTheme = ( themeName: THEMES ) => {\n  switch ( themeName ) {\n    case THEMES.DARK: return DARK;\n    default: return LIGHT;\n  }\n};\n","import React from 'react'\nimport { ThemeProvider } from 'styled-components'\nimport Chat from '../components/Chat'\nimport { getTheme } from '../providers/theme/getTheme'\nimport { RootState } from '../store/store'\nimport { useSelector } from 'react-redux'\n\nimport './App.scss'\n\nfunction App() {\n  const { themeName } = useSelector( ( state: RootState ) => state.ui );\n  return (\n    <ThemeProvider theme={ getTheme( themeName ) }>\n      <Chat />\n    </ThemeProvider>\n  );\n}\n\nexport default App;\n","import { SystemState, SystemActionTypes, UPDATE_SESSION } from '../types';\n\nconst initialState: SystemState = {\n  loggedIn: false,\n  session: null,\n  user: null\n};\n\nexport const systemReducer = ( state: SystemState = initialState, action: SystemActionTypes ) => {\n  switch ( action.type ) {\n    case UPDATE_SESSION:\n      return {\n        ...state,\n        ...action.payload\n      };\n    default:\n      return state;\n  }\n}","import { SystemActionTypes, SystemUI, UPDATE_THEME } from '../types'\nimport THEMES from '../../../providers/theme/themeList'\n\nconst initialState: SystemUI = {\n  themeName: THEMES.LIGHT\n};\n\nexport const uiReducer = ( state: SystemUI = initialState, action: SystemActionTypes ) => {\n  switch ( action.type ) {\n    case UPDATE_THEME:\n      return {\n        ...state,\n        ...action.payload\n      };\n    default:\n      return state;\n  }\n};\n","import {\n  ChatActionTypes,\n  ChatState,\n  SET_CURRENT_CONVERSATION,\n  SET_UNREAD_MESSAGES,\n  UPDATE_GROUP_LIST,\n  UPDATE_HIDDEN_MESSAGES,\n  UPDATE_MESSAGES_LIST,\n  UPDATE_PRIVATE_CHATS,\n  UPDATE_USERS_LIST\n} from '../types'\n\nconst initialState: ChatState = {\n  users: [],\n  groups: [],\n  messages: [],\n  privateChats: [],\n  unreadMessages: [],\n  hiddenMessages: []\n};\n\nexport const chatReducer = ( state: ChatState = initialState, action: ChatActionTypes ) => {\n  switch ( action.type ) {\n    case SET_UNREAD_MESSAGES:\n    case UPDATE_USERS_LIST:\n    case UPDATE_GROUP_LIST:\n    case UPDATE_MESSAGES_LIST:\n    case SET_CURRENT_CONVERSATION:\n    case UPDATE_PRIVATE_CHATS:\n    case UPDATE_HIDDEN_MESSAGES:\n      return {\n        ...state,\n        ...action.payload\n      }\n    default:\n      return state;\n  }\n}","import { createStore, combineReducers, compose, applyMiddleware } from 'redux'\nimport thunk from 'redux-thunk';\nimport { systemReducer } from './system/reducers/systemReducer';\nimport { uiReducer } from './system/reducers/uiReducer';\nimport { chatReducer } from './chat/reducers/chatReducer'\n\nconst composeEnhancers =\n  (typeof window !== 'undefined' && (window as any).__REDUX_DEVTOOLS_EXTENSION_COMPOSE__) || compose;\n\nconst reducers = combineReducers( {\n  system: systemReducer,\n  ui: uiReducer,\n  chat: chatReducer\n} );\n\nexport type RootState = ReturnType<typeof reducers>;\n\nexport const store = createStore(\n  reducers,\n  composeEnhancers(\n    applyMiddleware( thunk )\n  )\n);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport App from './app/App';\nimport { store } from './store/store';\n\nimport './index.scss';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={ store }>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}